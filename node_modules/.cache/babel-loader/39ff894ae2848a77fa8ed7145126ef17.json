{"ast":null,"code":"import _regeneratorRuntime from\"/Users/melesnegash/Desktop/PHASE THREE SECTION /101/Netflix-clone-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/melesnegash/Desktop/PHASE THREE SECTION /101/Netflix-clone-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/melesnegash/Desktop/PHASE THREE SECTION /101/Netflix-clone-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={heighr:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.title)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get('v'));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"h2\",null,title),/*#__PURE__*/React.createElement(\"div\",{className:\"row__posters\"},movies.map(function(movie){return/*#__PURE__*/React.createElement(\"img\",{key:movie.id,onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name});})),/*#__PURE__*/React.createElement(\"div\",{style:{padding:\"40px\"}},trailerUrl&&/*#__PURE__*/React.createElement(YouTube,{videoId:trailerUrl,opts:opts})));}export default Row;","map":{"version":3,"sources":["/Users/melesnegash/Desktop/PHASE THREE SECTION /101/Netflix-clone-master/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","heighr","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","id","poster_path","backdrop_path","name","padding"],"mappings":"0jBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,eAChBT,QAAQ,CAAC,EAAD,CADQ,wCACrCU,MADqC,eAC7BC,SAD6B,8BAERX,QAAQ,CAAC,EAAD,CAFA,yCAErCY,UAFqC,eAEzBC,aAFyB,eAG5CZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACN,QAAD,CAPM,CAAT,CAQA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAOA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,GAAGb,UAAH,CAAc,CACZC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEM,CACJT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAElB,KAAP,GAAgB,EAAjB,CAAZ,CACCmB,IADD,CACM,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAlB,aAAa,CAACe,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJD,EAKCiB,KALD,CAKO,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EALP,EAMD,CACF,CAXD,CAaA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,8BAAK1B,KAAL,CADF,cAEE,2BAAK,SAAS,CAAC,cAAf,EACGG,MAAM,CAAC0B,GAAP,CAAW,SAACX,KAAD,qBACV,2BACE,GAAG,CAAEA,KAAK,CAACY,EADb,CAEE,OAAO,CAAE,yBAAMb,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFX,CAGE,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAHX,CAIE,GAAG,WAAKJ,QAAL,SACDI,UAAU,CAAGgB,KAAK,CAACa,WAAT,CAAuBb,KAAK,CAACc,aADtC,CAJL,CAOE,GAAG,CAAEd,KAAK,CAACe,IAPb,EADU,EAAX,CADH,CAFF,cAeE,2BAAK,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAX,CAAZ,EACE7B,UAAU,eAAI,oBAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EADhB,CAfF,CADF,CAqBD,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\"\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    }\n  }\n  const handleClick = (movie) => {\n    if(trailerUrl){\n      setTrailerUrl('')\n    }else {\n      movieTrailer(movie?.title || \"\")\n      .then((url) => {\n        const urlParams = new URLSearchParams(new URL(url).search)\n        setTrailerUrl(urlParams.get('v'))\n      })\n      .catch((error) => console.log(error))\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      <div style={{ padding: \"40px\"}}>\n       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}